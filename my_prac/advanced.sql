use northwindmysql;

--32
SELECT DISTINCT C.CUSTOMERID, C.COMPANYNAME, O.ORDERID, SUM(OD.UNITPRICE * OD.QUANTITY) AS TOTALORDERAMOUNT
FROM CUSTOMERS AS C
JOIN ORDERS AS O ON C.CUSTOMERID = O.CUSTOMERID
JOIN ORDERDETAILS AS OD ON O.ORDERID = OD.ORDERID
WHERE YEAR(O.ORDERDATE) = 2016
GROUP BY 
O.ORDERID,
C.CUSTOMERID,
C.COMPANYNAME
HAVING TOTALORDERAMOUNT >= 10000;

--33 AND 34 MIX - JUST SPLIT AS PER REQUIREMENTS
SELECT DISTINCT C.CUSTOMERID, C.COMPANYNAME, SUM(OD.UNITPRICE * OD.QUANTITY) AS TOTALORDERAMOUNT, 
SUM((OD.UNITPRICE * OD.QUANTITY) - (OD.DISCOUNT * (OD.UNITPRICE * OD.QUANTITY))) AS TOTALORDERAMOUNTWITHDISCOUNT
FROM CUSTOMERS AS C
JOIN ORDERS AS O ON C.CUSTOMERID = O.CUSTOMERID
JOIN ORDERDETAILS AS OD ON O.ORDERID = OD.ORDERID
WHERE YEAR(O.ORDERDATE) = 2016
GROUP BY
C.CUSTOMERID,
C.COMPANYNAME
HAVING TOTALORDERAMOUNT >= 15000
ORDER BY TOTALORDERAMOUNTWITHDISCOUNT DESC;

--35
SELECT
    EmployeeID,
    OrderID,
    OrderDate
FROM
    Orders
WHERE
    -- Compare the date part of OrderDate with the last day of its month
    DATE(OrderDate) = LAST_DAY(OrderDate)
ORDER BY
    EmployeeID,
    OrderID;


--36
SELECT O.ORDERID, COUNT(OD.ORDERID) AS NUMBEROFITEMS
FROM ORDERS AS O
JOIN ORDERDETAILS AS OD ON O.ORDERID = OD.ORDERID
GROUP BY O.ORDERID
ORDER BY NUMBEROFITEMS
LIMIT 10;

--37
SELECT O.ORDERID FROM ORDERS AS O
ORDER BY RAND() 
LIMIT (SELECT CAST(CEIL(COUNT(*) * 0.02) AS UNSIGNED) FROM ORDERS);
-- ABOVE IS NOT WORKING FOR ME

-- 38
SELECT DISTINCT OD.ORDERID
FROM ORDERDETAILS AS OD
JOIN ORDERS AS O ON 
OD.ORDERID = O.ORDERID
WHERE OD.QUANTITY >= 60
AND O.EMPLOYEEID = (SELECT EMPLOYEEID FROM EMPLOYEES WHERE LASTNAME = 'LEVERLING' AND FIRSTNAME = 'JANET')
GROUP BY OD.ORDERID, OD.QUANTITY
HAVING COUNT(*) > 1
ORDER BY OD.ORDERID;


-- TO CHECK - AGAIN 
SELECT * FROM ORDERDETAILS AS OD
JOIN ORDERS AS O ON 
O.ORDERID = O.ORDERID
WHERE OD.ORDERID IN (10263,
10263,
10990,
10658,
11030
)
AND OD.QUANTITY >= 60
AND O.EMPLOYEEID = 3;


SELECT DISTINCT -- Select distinct OrderIDs that satisfy the conditions
    O.OrderID
FROM
    Orders AS O -- Start with Orders to easily filter by EmployeeID
JOIN
    OrderDetails AS OD1 ON O.OrderID = OD1.OrderID -- Join to find a first line item
JOIN
    OrderDetails AS OD2 ON O.OrderID = OD2.OrderID -- Join again to find a second line item IN THE SAME ORDER
WHERE
    O.EmployeeID = ( -- Filter orders placed by Janet Leverling
        SELECT EmployeeID
        FROM Employees
        WHERE LastName = 'Leverling' AND FirstName = 'Janet'
    )
    AND OD1.Quantity >= 60          -- The quantity must be 60 or more
    AND OD1.Quantity = OD2.Quantity -- The quantity must be the same on both lines
    AND OD1.ProductID != OD2.ProductID -- The ProductIDs must be different
ORDER BY
    O.OrderID;


-- TO CHECK 
SELECT * FROM EMPLOYEES WHERE LASTNAME = 'LEVERLING' AND FIRSTNAME = 'JANET';

-- ID DON'T KNOW WHY BUT THE QUERIES ARE CERTAINLY NOT WORKING

-- 39
-- SKIPPING AS BASED ON 38

-- 40 
-- ALSO SKIPPING THIS 

-- 41
SELECT ORDERID, ORDERDATE, REQUIREDDATE, SHIPPEDDATE
FROM ORDERS
WHERE SHIPPEDDATE >= REQUIREDDATE; 


-- 42
SELECT E.EMPLOYEEID, E.LASTNAME, COUNT(O.ORDERID) AS TOTALLATEORDERS
FROM ORDERS AS O
JOIN EMPLOYEES AS E ON O.EMPLOYEEID = E.EMPLOYEEID
WHERE O.SHIPPEDDATE > O.REQUIREDDATE
GROUP BY E.EMPLOYEEID
ORDER BY TOTALLATEORDERS DESC;

-- 43 
SELECT LATE.EMPLOYEEID, LATE.LASTNAME, LATE.TOTALLATEORDERS, COUNT(O.ORDERID) AS TOTALORDERS FROM 
    (
        SELECT E.EMPLOYEEID, E.LASTNAME, COUNT(O.ORDERID) AS TOTALLATEORDERS
        FROM ORDERS AS O
        JOIN EMPLOYEES AS E ON O.EMPLOYEEID = E.EMPLOYEEID
        WHERE O.SHIPPEDDATE > O.REQUIREDDATE
        GROUP BY E.EMPLOYEEID
    )
    AS LATE
    JOIN ORDERS AS O ON
    LATE.EMPLOYEEID = O.EMPLOYEEID
    GROUP BY LATE.EMPLOYEEID;


-- 44
SELECT E.EMPLOYEEID, E.LASTNAME, 
    SUM(CASE WHEN O.SHIPPEDDATE > O.REQUIREDDATE THEN 1 ELSE 0 END) AS TOTALLATEORDERS,
    COUNT(O.ORDERID) AS TOTALORDERS
FROM EMPLOYEES AS E
LEFT JOIN ORDERS AS O ON
E.EMPLOYEEID = O.EMPLOYEEID
GROUP BY E.EMPLOYEEID, E.LASTNAME
ORDER BY E.EMPLOYEEID;


-- 45
-- 44 == 45 AS WE ALREADY HAVE FIXED IT

-- 46
SELECT E.EMPLOYEEID, E.LASTNAME, 
    SUM(CASE WHEN O.SHIPPEDDATE > O.REQUIREDDATE THEN 1 ELSE 0 END) AS TOTALLATEORDERS,
    ((SUM(CASE WHEN O.SHIPPEDDATE > O.REQUIREDDATE THEN 1 ELSE 0 END) / COUNT(O.ORDERID)) * 100) AS PERCENTLATEORDERS
FROM EMPLOYEES AS E
LEFT JOIN ORDERS AS O ON
E.EMPLOYEEID = O.EMPLOYEEID
GROUP BY E.EMPLOYEEID, E.LASTNAME
ORDER BY E.EMPLOYEEID;

-- REMEMBER: CAN IMPROVISE THE ABOVE BY USING CASE WHEN TO PREVENT DIVISION BY ZERO ERROR
-- HERE IS THE IMPLEMENTATION:
SELECT E.EMPLOYEEID, E.LASTNAME, 
    SUM(CASE WHEN O.SHIPPEDDATE > O.REQUIREDDATE THEN 1 ELSE 0 END) AS TOTALLATEORDERS,
    CASE WHEN COUNT(O.ORDERID) = 0 THEN 0
    ELSE
    ((SUM(CASE WHEN O.SHIPPEDDATE > O.REQUIREDDATE THEN 1 ELSE 0 END) * 100) / COUNT(O.ORDERID)) END AS PERCENTLATEORDERS
FROM EMPLOYEES AS E
LEFT JOIN ORDERS AS O ON
E.EMPLOYEEID = O.EMPLOYEEID
GROUP BY E.EMPLOYEEID, E.LASTNAME
ORDER BY E.EMPLOYEEID;


-- 47
SELECT E.EMPLOYEEID, E.LASTNAME, 
    SUM(CASE WHEN O.SHIPPEDDATE > O.REQUIREDDATE THEN 1 ELSE 0 END) AS TOTALLATEORDERS,
    ROUND((CASE WHEN COUNT(O.ORDERID) = 0 THEN 0
    ELSE
    ((SUM(CASE WHEN O.SHIPPEDDATE > O.REQUIREDDATE THEN 1 ELSE 0 END) * 100) / COUNT(O.ORDERID)) END), 2) AS PERCENTLATEORDERS
FROM EMPLOYEES AS E
LEFT JOIN ORDERS AS O ON
E.EMPLOYEEID = O.EMPLOYEEID
GROUP BY E.EMPLOYEEID, E.LASTNAME
ORDER BY E.EMPLOYEEID;


-- 48
SELECT O.CUSTOMERID, C.COMPANYNAME, SUM(OD.UNITPRICE * OD.QUANTITY) AS TOTALORDERAMOUNT,
(CASE 
    WHEN SUM(OD.UNITPRICE * OD.QUANTITY) >= 10000 THEN 'VERY HIGH'
    WHEN SUM(OD.UNITPRICE * OD.QUANTITY) BETWEEN 10000 AND 5000 THEN 'HIGH'
    WHEN SUM(OD.UNITPRICE * OD.QUANTITY) BETWEEN 5000 AND 1000 THEN 'MEDIUM'
    WHEN SUM(OD.UNITPRICE * OD.QUANTITY) <= 1000 THEN 'LOW'
END) AS CUSTOMERGROUP
FROM ORDERS AS O
JOIN CUSTOMERS AS C 
ON O.CUSTOMERID = C.CUSTOMERID
JOIN ORDERDETAILS AS OD ON O.ORDERID = OD.ORDERID
WHERE YEAR(O.ORDERDATE) = 2016
GROUP BY O.CUSTOMERID;


-- 49
